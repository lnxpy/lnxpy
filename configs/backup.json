[{"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2021-05-05T15:40:20.825Z", "user": 1, "content_type": 6, "object_id": "1", "object_repr": "Local Django Project with Postgres Docker Container", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2021-05-05T15:40:49.027Z", "user": 1, "content_type": 6, "object_id": "1", "object_repr": "Local Django Project with Postgres Docker Container", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2021-05-05T15:41:03.107Z", "user": 1, "content_type": 6, "object_id": "1", "object_repr": "Local Django Project with Postgres Docker Container", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 4, "fields": {"action_time": "2021-05-05T15:41:33.759Z", "user": 1, "content_type": 6, "object_id": "1", "object_repr": "Local Django Project with Postgres Docker Container", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 5, "fields": {"action_time": "2021-05-05T15:42:53.016Z", "user": 1, "content_type": 6, "object_id": "1", "object_repr": "Local Django Project with Postgres Docker Container", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 6, "fields": {"action_time": "2021-05-05T15:43:05.970Z", "user": 1, "content_type": 6, "object_id": "1", "object_repr": "Local Django Project with Postgres Docker Container", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 7, "fields": {"action_time": "2021-05-05T15:46:59.912Z", "user": 1, "content_type": 6, "object_id": "2", "object_repr": "Proxy vs Reverse Proxy", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 8, "fields": {"action_time": "2021-05-05T15:55:26.226Z", "user": 1, "content_type": 6, "object_id": "2", "object_repr": "Proxy vs Reverse Proxy", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 9, "fields": {"action_time": "2021-05-05T15:58:23.986Z", "user": 1, "content_type": 6, "object_id": "2", "object_repr": "Proxy vs Reverse Proxy", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 10, "fields": {"action_time": "2021-05-05T16:00:04.265Z", "user": 1, "content_type": 6, "object_id": "2", "object_repr": "Proxy vs Reverse Proxy", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 11, "fields": {"action_time": "2021-05-05T16:01:14.946Z", "user": 1, "content_type": 6, "object_id": "2", "object_repr": "Proxy vs Reverse Proxy", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 12, "fields": {"action_time": "2021-05-05T16:10:49.681Z", "user": 1, "content_type": 6, "object_id": "3", "object_repr": "The Power of Django ORM", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 13, "fields": {"action_time": "2021-05-05T16:12:22.807Z", "user": 1, "content_type": 6, "object_id": "3", "object_repr": "The Power of Django ORM", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 14, "fields": {"action_time": "2021-05-09T15:53:35.717Z", "user": 1, "content_type": 6, "object_id": "2", "object_repr": "Proxy vs Reverse Proxy", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Draft\"]}}]"}}, {"model": "admin.logentry", "pk": 15, "fields": {"action_time": "2021-05-10T16:08:52.935Z", "user": 1, "content_type": 6, "object_id": "3", "object_repr": "The Power of Django ORM", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Abstract\", \"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 16, "fields": {"action_time": "2021-05-10T16:09:34.034Z", "user": 1, "content_type": 6, "object_id": "3", "object_repr": "The Power of Django ORM", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 17, "fields": {"action_time": "2021-05-10T16:10:31.505Z", "user": 1, "content_type": 6, "object_id": "2", "object_repr": "Proxy vs Reverse Proxy", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 18, "fields": {"action_time": "2021-05-10T16:16:24.393Z", "user": 1, "content_type": 6, "object_id": "3", "object_repr": "The Power of Django ORM", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 19, "fields": {"action_time": "2021-05-15T18:15:33.732Z", "user": 1, "content_type": 6, "object_id": "4", "object_repr": "How with() Releases the Resources", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 20, "fields": {"action_time": "2021-05-15T18:26:41.155Z", "user": 1, "content_type": 6, "object_id": "4", "object_repr": "How with() Releases the Resources", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 21, "fields": {"action_time": "2021-05-15T18:35:02.250Z", "user": 1, "content_type": 6, "object_id": "4", "object_repr": "How with() Releases the Resources", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 22, "fields": {"action_time": "2021-05-15T18:38:00.406Z", "user": 1, "content_type": 6, "object_id": "4", "object_repr": "How with() Releases the Resources", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 23, "fields": {"action_time": "2021-05-15T18:49:07.956Z", "user": 1, "content_type": 6, "object_id": "4", "object_repr": "How with() Releases the Resources", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 24, "fields": {"action_time": "2021-05-15T18:53:08.607Z", "user": 1, "content_type": 6, "object_id": "4", "object_repr": "How with() Releases the Resources", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 25, "fields": {"action_time": "2021-05-15T18:54:16.279Z", "user": 1, "content_type": 6, "object_id": "4", "object_repr": "How with() Releases the Resources", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 26, "fields": {"action_time": "2021-05-16T05:36:34.428Z", "user": 1, "content_type": 6, "object_id": "4", "object_repr": "How Context Management Releases the Resources", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 27, "fields": {"action_time": "2021-05-20T12:11:58.857Z", "user": 1, "content_type": 6, "object_id": "4", "object_repr": "How Context Management Releases the Resources", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 28, "fields": {"action_time": "2021-05-20T12:29:35.054Z", "user": 1, "content_type": 6, "object_id": "4", "object_repr": "How Context Management Releases the Resources", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Abstract\", \"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 29, "fields": {"action_time": "2021-05-24T06:33:22.788Z", "user": 1, "content_type": 6, "object_id": "5", "object_repr": "Python Closures; Known as Small Classes", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 30, "fields": {"action_time": "2021-05-24T07:17:44.774Z", "user": 1, "content_type": 6, "object_id": "5", "object_repr": "Python Closures; Known as Small Classes", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 31, "fields": {"action_time": "2021-05-24T07:19:17.238Z", "user": 1, "content_type": 6, "object_id": "5", "object_repr": "Python Closures; Also Known as Small Classes", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 32, "fields": {"action_time": "2021-05-29T20:17:15.091Z", "user": 1, "content_type": 6, "object_id": "6", "object_repr": "A Few Tips to Become Smarter at Django", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 33, "fields": {"action_time": "2021-05-29T20:18:30.453Z", "user": 1, "content_type": 6, "object_id": "6", "object_repr": "A Few Tips to Become Smarter at Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 34, "fields": {"action_time": "2021-06-07T13:27:26.680Z", "user": 1, "content_type": 6, "object_id": "6", "object_repr": "A Few Tips to Become Smarter at Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 35, "fields": {"action_time": "2021-06-07T13:28:03.103Z", "user": 1, "content_type": 6, "object_id": "6", "object_repr": "A Few Tips to Become Smarter at Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 36, "fields": {"action_time": "2021-06-07T13:39:52.995Z", "user": 1, "content_type": 6, "object_id": "6", "object_repr": "A Few Tips to Become Smarter at Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 37, "fields": {"action_time": "2021-06-07T13:40:30.396Z", "user": 1, "content_type": 6, "object_id": "6", "object_repr": "A Few Tips to Become Smarter at Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 38, "fields": {"action_time": "2021-06-07T13:58:03.088Z", "user": 1, "content_type": 6, "object_id": "6", "object_repr": "A Few Tips to Become Smarter at Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 39, "fields": {"action_time": "2021-06-07T14:00:58.124Z", "user": 1, "content_type": 6, "object_id": "6", "object_repr": "A Few Tips to Become Smarter at Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 40, "fields": {"action_time": "2021-06-11T13:45:46.746Z", "user": 1, "content_type": 6, "object_id": "6", "object_repr": "A Few Tips to Become Smarter at Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 41, "fields": {"action_time": "2021-06-11T13:46:59.286Z", "user": 1, "content_type": 6, "object_id": "6", "object_repr": "A Few Tips to Become Smarter at Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 42, "fields": {"action_time": "2021-06-11T13:47:35.564Z", "user": 1, "content_type": 6, "object_id": "6", "object_repr": "A Few Tips to Become Smarter at Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 43, "fields": {"action_time": "2021-06-11T13:47:54.421Z", "user": 1, "content_type": 6, "object_id": "6", "object_repr": "A Few Tips to Become Smarter at Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 44, "fields": {"action_time": "2021-06-11T13:50:04.844Z", "user": 1, "content_type": 6, "object_id": "3", "object_repr": "The Power of Django ORM", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 45, "fields": {"action_time": "2021-06-11T13:58:25.369Z", "user": 1, "content_type": 6, "object_id": "6", "object_repr": "A Few Tips to Become Smarter at Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 46, "fields": {"action_time": "2021-06-11T14:17:26.947Z", "user": 1, "content_type": 6, "object_id": "6", "object_repr": "A Few Tips to Become Smarter at Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 47, "fields": {"action_time": "2021-06-11T14:24:58.475Z", "user": 1, "content_type": 6, "object_id": "6", "object_repr": "A Few Tips to Become Smarter at Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 48, "fields": {"action_time": "2021-06-11T14:34:23.659Z", "user": 1, "content_type": 6, "object_id": "6", "object_repr": "A Few Tips to Become Smarter at Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "admin.logentry", "pk": 49, "fields": {"action_time": "2021-06-11T14:37:27.251Z", "user": 1, "content_type": 6, "object_id": "6", "object_repr": "A Few Tips to Become Smarter at Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Abstract\"]}}]"}}, {"model": "admin.logentry", "pk": 50, "fields": {"action_time": "2021-07-11T13:19:58.314Z", "user": 1, "content_type": 11, "object_id": "1", "object_repr": "BlueLight", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 51, "fields": {"action_time": "2021-07-11T13:29:08.471Z", "user": 1, "content_type": 11, "object_id": "2", "object_repr": "DBMQ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 52, "fields": {"action_time": "2021-07-11T15:16:32.242Z", "user": 1, "content_type": 11, "object_id": "1", "object_repr": "DBMQ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 53, "fields": {"action_time": "2021-07-11T15:18:22.929Z", "user": 1, "content_type": 11, "object_id": "2", "object_repr": "BlueLight", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "auth.permission", "pk": 1, "fields": {"name": "Can add log entry", "content_type": 1, "codename": "add_logentry"}}, {"model": "auth.permission", "pk": 2, "fields": {"name": "Can change log entry", "content_type": 1, "codename": "change_logentry"}}, {"model": "auth.permission", "pk": 3, "fields": {"name": "Can delete log entry", "content_type": 1, "codename": "delete_logentry"}}, {"model": "auth.permission", "pk": 4, "fields": {"name": "Can view log entry", "content_type": 1, "codename": "view_logentry"}}, {"model": "auth.permission", "pk": 5, "fields": {"name": "Can add permission", "content_type": 2, "codename": "add_permission"}}, {"model": "auth.permission", "pk": 6, "fields": {"name": "Can change permission", "content_type": 2, "codename": "change_permission"}}, {"model": "auth.permission", "pk": 7, "fields": {"name": "Can delete permission", "content_type": 2, "codename": "delete_permission"}}, {"model": "auth.permission", "pk": 8, "fields": {"name": "Can view permission", "content_type": 2, "codename": "view_permission"}}, {"model": "auth.permission", "pk": 9, "fields": {"name": "Can add group", "content_type": 3, "codename": "add_group"}}, {"model": "auth.permission", "pk": 10, "fields": {"name": "Can change group", "content_type": 3, "codename": "change_group"}}, {"model": "auth.permission", "pk": 11, "fields": {"name": "Can delete group", "content_type": 3, "codename": "delete_group"}}, {"model": "auth.permission", "pk": 12, "fields": {"name": "Can view group", "content_type": 3, "codename": "view_group"}}, {"model": "auth.permission", "pk": 13, "fields": {"name": "Can add content type", "content_type": 4, "codename": "add_contenttype"}}, {"model": "auth.permission", "pk": 14, "fields": {"name": "Can change content type", "content_type": 4, "codename": "change_contenttype"}}, {"model": "auth.permission", "pk": 15, "fields": {"name": "Can delete content type", "content_type": 4, "codename": "delete_contenttype"}}, {"model": "auth.permission", "pk": 16, "fields": {"name": "Can view content type", "content_type": 4, "codename": "view_contenttype"}}, {"model": "auth.permission", "pk": 17, "fields": {"name": "Can add session", "content_type": 5, "codename": "add_session"}}, {"model": "auth.permission", "pk": 18, "fields": {"name": "Can change session", "content_type": 5, "codename": "change_session"}}, {"model": "auth.permission", "pk": 19, "fields": {"name": "Can delete session", "content_type": 5, "codename": "delete_session"}}, {"model": "auth.permission", "pk": 20, "fields": {"name": "Can view session", "content_type": 5, "codename": "view_session"}}, {"model": "auth.permission", "pk": 21, "fields": {"name": "Can add post", "content_type": 6, "codename": "add_post"}}, {"model": "auth.permission", "pk": 22, "fields": {"name": "Can change post", "content_type": 6, "codename": "change_post"}}, {"model": "auth.permission", "pk": 23, "fields": {"name": "Can delete post", "content_type": 6, "codename": "delete_post"}}, {"model": "auth.permission", "pk": 24, "fields": {"name": "Can view post", "content_type": 6, "codename": "view_post"}}, {"model": "auth.permission", "pk": 25, "fields": {"name": "Can add user", "content_type": 7, "codename": "add_customuser"}}, {"model": "auth.permission", "pk": 26, "fields": {"name": "Can change user", "content_type": 7, "codename": "change_customuser"}}, {"model": "auth.permission", "pk": 27, "fields": {"name": "Can delete user", "content_type": 7, "codename": "delete_customuser"}}, {"model": "auth.permission", "pk": 28, "fields": {"name": "Can view user", "content_type": 7, "codename": "view_customuser"}}, {"model": "auth.permission", "pk": 29, "fields": {"name": "Can add login attempt", "content_type": 8, "codename": "add_loginattempt"}}, {"model": "auth.permission", "pk": 30, "fields": {"name": "Can change login attempt", "content_type": 8, "codename": "change_loginattempt"}}, {"model": "auth.permission", "pk": 31, "fields": {"name": "Can delete login attempt", "content_type": 8, "codename": "delete_loginattempt"}}, {"model": "auth.permission", "pk": 32, "fields": {"name": "Can view login attempt", "content_type": 8, "codename": "view_loginattempt"}}, {"model": "auth.permission", "pk": 33, "fields": {"name": "Can add Token", "content_type": 9, "codename": "add_token"}}, {"model": "auth.permission", "pk": 34, "fields": {"name": "Can change Token", "content_type": 9, "codename": "change_token"}}, {"model": "auth.permission", "pk": 35, "fields": {"name": "Can delete Token", "content_type": 9, "codename": "delete_token"}}, {"model": "auth.permission", "pk": 36, "fields": {"name": "Can view Token", "content_type": 9, "codename": "view_token"}}, {"model": "auth.permission", "pk": 37, "fields": {"name": "Can add token", "content_type": 10, "codename": "add_tokenproxy"}}, {"model": "auth.permission", "pk": 38, "fields": {"name": "Can change token", "content_type": 10, "codename": "change_tokenproxy"}}, {"model": "auth.permission", "pk": 39, "fields": {"name": "Can delete token", "content_type": 10, "codename": "delete_tokenproxy"}}, {"model": "auth.permission", "pk": 40, "fields": {"name": "Can view token", "content_type": 10, "codename": "view_tokenproxy"}}, {"model": "auth.permission", "pk": 41, "fields": {"name": "Can add project", "content_type": 11, "codename": "add_project"}}, {"model": "auth.permission", "pk": 42, "fields": {"name": "Can change project", "content_type": 11, "codename": "change_project"}}, {"model": "auth.permission", "pk": 43, "fields": {"name": "Can delete project", "content_type": 11, "codename": "delete_project"}}, {"model": "auth.permission", "pk": 44, "fields": {"name": "Can view project", "content_type": 11, "codename": "view_project"}}, {"model": "contenttypes.contenttype", "pk": 1, "fields": {"app_label": "admin", "model": "logentry"}}, {"model": "contenttypes.contenttype", "pk": 2, "fields": {"app_label": "auth", "model": "permission"}}, {"model": "contenttypes.contenttype", "pk": 3, "fields": {"app_label": "auth", "model": "group"}}, {"model": "contenttypes.contenttype", "pk": 4, "fields": {"app_label": "contenttypes", "model": "contenttype"}}, {"model": "contenttypes.contenttype", "pk": 5, "fields": {"app_label": "sessions", "model": "session"}}, {"model": "contenttypes.contenttype", "pk": 6, "fields": {"app_label": "core", "model": "post"}}, {"model": "contenttypes.contenttype", "pk": 7, "fields": {"app_label": "accounts", "model": "customuser"}}, {"model": "contenttypes.contenttype", "pk": 8, "fields": {"app_label": "admin_honeypot", "model": "loginattempt"}}, {"model": "contenttypes.contenttype", "pk": 9, "fields": {"app_label": "authtoken", "model": "token"}}, {"model": "contenttypes.contenttype", "pk": 10, "fields": {"app_label": "authtoken", "model": "tokenproxy"}}, {"model": "contenttypes.contenttype", "pk": 11, "fields": {"app_label": "core", "model": "project"}}, {"model": "sessions.session", "pk": "0uwpt6xfjmzv5germ64wmhdwnas4m8sc", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2pChQGVcuvcMZIBBqgaS0q6Md7dNutDtf-_9t_C0LsWvnWc_JXERSpx-t0DxyXUH6UH13mRsdZmnIHdFHrTLW0v8uh7u30GhXrYaFGbHjGQIyIEmYDCINCDwhiJoOMeUM2YO42jQBD1k55TK0VokKz5f41832w:1mn5mT:9XLaRZHMnJ4XreyYKe2RHZ0WlxFzBSPFweZo92HTGVw", "expire_date": "2021-11-30T21:14:17.153Z"}}, {"model": "sessions.session", "pk": "9pxjzic8c4j15zgxrr2lgw54gjh47d8u", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2pChQGVcuvcMZIBBqgaS0q6Md7dNutDtf-_9t_C0LsWvnWc_JXERSpx-t0DxyXUH6UH13mRsdZmnIHdFHrTLW0v8uh7u30GhXrYaFGbHjGQIyIEmYDCINCDwhiJoOMeUM2YO42jQBD1k55TK0VokKz5f41832w:1ln52M:ROA_pAy-lf311kbGpEQZCNSoHIwPjuz-48sHDcdD8xc", "expire_date": "2021-06-12T19:54:22.337Z"}}, {"model": "sessions.session", "pk": "bgcg6r0q1skbwfsua0o6vzg2lok3k3ge", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2pChQGVcuvcMZIBBqgaS0q6Md7dNutDtf-_9t_C0LsWvnWc_JXERSpx-t0DxyXUH6UH13mRsdZmnIHdFHrTLW0v8uh7u30GhXrYaFGbHjGQIyIEmYDCINCDwhiJoOMeUM2YO42jQBD1k55TK0VokKz5f41832w:1m2ZLT:n9dWNqVlidqlK9JRRuQZcGAEBwC5fgQbYXjSRvMP7qw", "expire_date": "2021-07-25T13:18:07.769Z"}}, {"model": "sessions.session", "pk": "d0dm1yenimwn9yg5sll2fhkgksfm7x2s", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2pChQGVcuvcMZIBBqgaS0q6Md7dNutDtf-_9t_C0LsWvnWc_JXERSpx-t0DxyXUH6UH13mRsdZmnIHdFHrTLW0v8uh7u30GhXrYaFGbHjGQIyIEmYDCINCDwhiJoOMeUM2YO42jQBD1k55TK0VokKz5f41832w:1ll1Op:fQ34mmpWgZZ8GXaIt530jNeaVjC_R_oWM2SfynunWOo", "expire_date": "2021-06-07T03:37:03.494Z"}}, {"model": "sessions.session", "pk": "f24022ep3d0oz1wnyslzg76su74b610x", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2pChQGVcuvcMZIBBqgaS0q6Md7dNutDtf-_9t_C0LsWvnWc_JXERSpx-t0DxyXUH6UH13mRsdZmnIHdFHrTLW0v8uh7u30GhXrYaFGbHjGQIyIEmYDCINCDwhiJoOMeUM2YO42jQBD1k55TK0VokKz5f41832w:1my0Ib:-VlN4oOpIT7E4lJz098ILYmlBhRXVCWi9ZPuRniqQhU", "expire_date": "2021-12-30T23:36:33.263Z"}}, {"model": "sessions.session", "pk": "iu8dyneox3mdnj8uffxr2kq52w6hyst4", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2pChQGVcuvcMZIBBqgaS0q6Md7dNutDtf-_9t_C0LsWvnWc_JXERSpx-t0DxyXUH6UH13mRsdZmnIHdFHrTLW0v8uh7u30GhXrYaFGbHjGQIyIEmYDCINCDwhiJoOMeUM2YO42jQBD1k55TK0VokKz5f41832w:1leJXz:5YIsPCnlYzHqieUJGk8tmox21Di-sgN3mXFri_VfdwQ", "expire_date": "2021-05-19T15:34:47.597Z"}}, {"model": "sessions.session", "pk": "ll341jbvqkxektfindmcc4ihfp8dzvu4", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2pChQGVcuvcMZIBBqgaS0q6Md7dNutDtf-_9t_C0LsWvnWc_JXERSpx-t0DxyXUH6UH13mRsdZmnIHdFHrTLW0v8uh7u30GhXrYaFGbHjGQIyIEmYDCINCDwhiJoOMeUM2YO42jQBD1k55TK0VokKz5f41832w:1m8EhD:iyJCEvqcgrKkPzc_3F-0DIDxUzdKtd6K0dBtL1LcSkc", "expire_date": "2021-08-10T04:27:59.711Z"}}, {"model": "sessions.session", "pk": "m5frwm3byd61ezrasjxsqrejuy85ai8s", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2pChQGVcuvcMZIBBqgaS0q6Md7dNutDtf-_9t_C0LsWvnWc_JXERSpx-t0DxyXUH6UH13mRsdZmnIHdFHrTLW0v8uh7u30GhXrYaFGbHjGQIyIEmYDCINCDwhiJoOMeUM2YO42jQBD1k55TK0VokKz5f41832w:1li9Qf:JOa6K9NFs27j9_Eb0PN7jVHhSZEvFdHYvIAVnvLmuQM", "expire_date": "2021-05-30T05:35:05.495Z"}}, {"model": "sessions.session", "pk": "mt52tuv7najwj4u7tefyxidpxb9njh4a", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2pChQGVcuvcMZIBBqgaS0q6Md7dNutDtf-_9t_C0LsWvnWc_JXERSpx-t0DxyXUH6UH13mRsdZmnIHdFHrTLW0v8uh7u30GhXrYaFGbHjGQIyIEmYDCINCDwhiJoOMeUM2YO42jQBD1k55TK0VokKz5f41832w:1leKIq:I1pZD0iBQv0Dku1IyF6lsrIZLj0fGLuVi2IrfKAy_-k", "expire_date": "2021-05-19T16:23:12.618Z"}}, {"model": "sessions.session", "pk": "nbo8qelvfnrxydi9u8o3z54op22ccapb", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2pChQGVcuvcMZIBBqgaS0q6Md7dNutDtf-_9t_C0LsWvnWc_JXERSpx-t0DxyXUH6UH13mRsdZmnIHdFHrTLW0v8uh7u30GhXrYaFGbHjGQIyIEmYDCINCDwhiJoOMeUM2YO42jQBD1k55TK0VokKz5f41832w:1n3ZaO:ZMqnUedGmrC6GbcpRaUATbx0eCNAoKvYDPGOAzAH510", "expire_date": "2022-01-15T08:17:56.810Z"}}, {"model": "sessions.session", "pk": "p3bvmc9k48tvwsm7h121idjlfko65zx8", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2pChQGVcuvcMZIBBqgaS0q6Md7dNutDtf-_9t_C0LsWvnWc_JXERSpx-t0DxyXUH6UH13mRsdZmnIHdFHrTLW0v8uh7u30GhXrYaFGbHjGQIyIEmYDCINCDwhiJoOMeUM2YO42jQBD1k55TK0VokKz5f41832w:1ljhVl:m-pBV5WLnnap7KvYvNdpqEPnb-2I_T5Eya3E_HKIgfA", "expire_date": "2021-06-03T12:10:45.608Z"}}, {"model": "core.post", "pk": 3, "fields": {"title": "The Power of Django ORM", "abstract": "Object Relational Mapping functions and methods help you to interact with the DB in an optimized way. Here, we are going to take a look at its features and things that you better know about this tech.", "body": "### What is ORM\r\nObject Relational Mapping (ORM) allows developers to progress their projects and interact with the database via OOP. In this case, you do not need to have any knowledge about the SQL or NoSQL syntax. As I mentioned, you need to know OOP in order to work with ORMs on your platform.\r\n\r\nIn this article, I'll show you how to use Django ORM in an efficient way, what's more, you'll figure out the ways that you can optimize your queries and connections. So, it's going to be a simple piece of cheat that you can refer to it anytime.\r\n\r\n### Use Exceptions in `get()`\r\nOne of the most important keys in pulling or pushing something from/to the database, is using exceptions to show the proper output.\r\n\r\n```python\r\ntry:\r\n    query = Users.objects.get(id=10)\r\nexcept Users.DoesNotExist:\r\n    # some code here..\r\nexcept Users.MultipleObjectsReturned:\r\n    # some code here..\r\nelse:\r\n    # some code here as well..\r\n```\r\nUsing the proper exceptions is the key to being a genius in ORMs.\r\n\r\n### Django `connection`\r\n`connection` is one of the most extraordinary built-in Django modules. It allows you to optimize your ORM query as well as it's complicity. It takes the last query SQL syntax and shows the run time in order to make you to be able to optimize your stuff. You can either test your modules or write them through the prompt shell.\r\n\r\n```python\r\n>>> from django.db import connection\r\n>>> connection.queries\r\n[]\r\n>>> Author.objects.all()\r\n<QuerySet [<Author: Author object>]>\r\n>>> connection.queries\r\n[{u'time': u'0.002', u'sql': u'SELECT \"library_author\".\"id\", \"library_author\".\"name\" FROM \"library_author\" LIMIT 21'}]\r\n```\r\n\r\nYou can also use `--print-sql` switch in order to use Django connections automatically when you want to run into the Django shell. (In this case, every time you make queries, the prompt shows you the current query SQL syntax + its response time)\r\n\r\n### Iterators\r\nA QuerySet typically caches its results when evaluation happens and for any further operations with that QuerySet, it first checks for cached results. But when you use `itarator()` it does not check for any cached data and it will read the results directly from the database as well as It does not save the results coming from the QuerySet. This technique avoids resource-consuming in most cases.\r\n\r\n```python\r\n# Without Iterators\r\nusers = Users.objects.all()\r\nfor user in users:\r\n    # some code here..\r\n\r\n# With Iterators\r\nusers = Users.objects.all().iterator()\r\nfor user in users:\r\n    # some core here..\r\n```\r\n\r\n### Set The Timeout\r\nTypically you need to keep the connections open for better performance otherwise, you have to work with several connections during your tasks with the database which is very time-consuming. Use `CONN_MAX_AGE` in settings to set how much time (ms) you want a connection to be opened. (Default is set to 0ms)\r\n\r\n### ORM Tricks\r\nLet's learn some of the most effective tricks that developers should know about the ORM in Django.\r\n\r\n#### F Function\r\nYou can change the value of a specific field from all records instead of creating loops and other stuff.\r\n\r\n```python\r\n# Don't\r\nfor user in Users.objects.all():\r\n    user.claps += 1\r\n    user.save()\r\n\r\n# Do\r\nUsers.objects.update(claps=F('claps') + 1)\r\n```\r\n\r\n#### Aggregations\r\nNever create queries in loops. It causes a ton of problems and technical issues with itself. Do queries in one line outside the loops.\r\n\r\n```python\r\n# Don't\r\nmost_claps = 0\r\nfor user in Users.objects.all():\r\n    if user.claps > most_claps:\r\n        most_claps = user.claps\r\n\r\n# Do\r\nmost_claps = Users.objects.all().aggregate(Max('claps'))['claps__max']\r\n```\r\n\r\n#### `len()` or `count()`\r\nSo simple, If you don't need the contents of your QuerySet, never use `len()` in order to get the count of your objects.\r\n\r\n```python\r\n# Don't\r\nall_users = len(Users.objects.all())\r\n\r\n# Do\r\nall_users = Users.objects.count()\r\n```\r\n\r\nAlso, use `exists()` method whenever you want to check an object's existence.\r\n\r\n```python\r\n# Do\r\nall_users = Users.objects.all()\r\nif all_users:\r\n    # some code here..\r\n\r\n# Don't\r\nall_users = Users.objects.exists()\r\nif all_users:\r\n    # some code here..\r\n```\r\n\r\n#### Why `bulk()` is Awesome\r\nThis method is highly effective throughout your works. Imagine that you need to create 100 records on your database. So, you start creating your loop and other stuff which is BRUH. Use `bulk()` to create thousands of record at once!\r\n\r\n```python\r\n# Never do\r\nfor i in range(100):\r\n    Users.objects.create(...)\r\n\r\n# Do\r\nUser_objects = []\r\nfor i in range(100):\r\n    User_objects.append(Users(...))\r\nUsers.objects.bulk_create(User_objects)\r\n```\r\n\r\nJust see how it affects on the latency. I've already created two tests here to show you the difference between these two methods.\r\n\r\n```Erlang\r\n(.venv)$ python manage.py test docs.tests.DocsTestCase.query\r\nCreating test database for alias 'default'...\r\nSystem check identified no issues (0 silenced).\r\n----------------------------------------------------------------------\r\nOK. Ran 1 test in 0.055s\r\n```\r\n\r\n```Erlang\r\n(.venv)$ python manage.py test docs.tests.DocsTestCase.query2\r\nCreating test database for alias 'default'...\r\nSystem check identified no issues (0 silenced).\r\n----------------------------------------------------------------------\r\nOK. Ran 1 test in 0.010s\r\n```\r\n\r\nAs you can see, the `bulk()` method is a lot faster than the previous traditional method. All these tools have been built to make the life much easier. What they do is they optimize the performance which is huge in a word.", "author": 1, "slug": "The-Power-of-Django-ORM", "lang": "lang", "is_draft": false, "published": "2021-05-05T16:10:49.676Z", "last_update": "2021-06-11T13:50:04.839Z"}}, {"model": "core.post", "pk": 4, "fields": {"title": "How Context Management Releases the Resources", "abstract": "A lot of Python developers only use the facilities. What if we make our techs? Why not implementing the \"with\" functionality ourselves for our classes? Let's check out this amazing stuff.", "body": "As a Python developer, you've definitely worked with the files that include using the `open()` class before. It all backs to whether using `with` or just keeping up with the old strategy which is weird. Why do the high-level developers use the `with` syntax too much?? What is the secret?? Let's check out.\r\n\r\n### Resource Management is Everything\r\nIn the software programs, everything is focused on resource management and optimizations. The better the resource manager your program has, the better experience would have the user. If so, your software won't crash anymore and I'm still able to set it up on my oldish PC over there which is huge in a word. In this article, I'm going to show you the magic behind the `with` in Python.\r\n\r\n### Use `with` From Now on\r\nYou might have been using the oldish style for using the file systems right? In this case, your resources are interacting with the file systems over and over even if you've done with the files. But how?\r\n\r\n```python\r\nfile = open('file.txt', 'w')\r\nfile.wrtie('name=test')\r\nfile.close()\r\n```\r\n\r\nHere you go. You prove that you have used `file.close()` in order to release the resources after writing in the file. Imagine that our file is missing or it's unloadable in Python. What would happen there? It's easy. The interpreter has raised an exception on line 2 which means that the third line is still untouched and the resources are still being used. You may give another shot with:\r\n\r\n```python\r\ntry:\r\n    file = open('file.txt', 'w')\r\n    file.write('test')\r\nexcept FileError:\r\n    # some code here..\r\n    pass\r\nfinally:\r\n    if file:\r\n        file.close()\r\n```\r\n\r\nYou gotcha. It's what `with` actually does. You've implemented the class all on your own. Why not making life much easier by using the Python facilities??\r\n\r\n```python\r\nwith open('file.txt', 'w') as file:\r\n    file.write('test')\r\n```\r\n\r\nIn the above case, your file will be loaded and after the processes, it finally will be closed and the resources are now released.\r\n\r\n### Let Them Use Your Classes with `with`\r\nAll you need is to implement the `__enter__` and `__exit__` methods for your class to make the users be able to release their resources after using your classes. Imagine you have a class that connects to a database and executes a single query and after that, It needs to close the connection between the host and the database engine. In this example, the concept is much more important than the actual script.\r\n\r\n```python\r\nimport database as DB\r\n\r\nclass DataBase():\r\n    def __init__(self, host, username, password, database):\r\n        # constructing the values...\r\n        pass\r\n\r\n    def __enter__(self):\r\n        self.connect = DB.connect(self.host)\r\n        return self\r\n\r\n    def __exit__(self):\r\n        self.close()\r\n```\r\n\r\nIn your scripts you can define your object in the following case using `with`:\r\n\r\n```\r\nfrom moduels import DataBase\r\n\r\nconfigs = {\r\n    'host': 'localhost',\r\n    'username': 'test',\r\n    'password': 'test123',\r\n    'database': 'shop',\r\n}\r\n\r\nwith DataBase(**configs) as db:\r\n    db.execute('SELECT * FROM users;')\r\n```\r\n\r\nNow, after each execution inside the `with` block, the database engine will be released which contains more resource compacity as well.\r\n\r\n### Conclusion\r\nPython has provided a lot of great classes, functions, and concepts. It's amazing to use the stuff that makes life easier. In this article, you learned a trick to stay far from the software crashes and over resource usages.", "author": 1, "slug": "how-context-management-releases-the-resources", "lang": "lang", "is_draft": false, "published": "2021-05-15T18:15:33.724Z", "last_update": "2021-05-20T12:29:35.045Z"}}, {"model": "core.post", "pk": 5, "fields": {"title": "Python Closures; Also Known as Small Classes", "abstract": "Are you an OOP guy? Always using OOP to solve the problems even if you don't actually need it? Well, it was at this moment that Python Closures released!", "body": "We are somehow familiar with OOP styles, their structures, and how they work. In most cases, we don't need the Object-Oriented structure, but we still use it and believe that everything is fine as clean. You are right as I totally agree with you. Everything is working. You make it a little bit complicated. Let's take a look at an example.\r\n\r\n### Python Classes\r\n\r\nImagine that you have to make a connection between your host and your database and you need to pass the QuerySet every time and get the result as well. You try to implement it using classes like what I have below.\r\n\r\n```python\r\nimport mysql.connector\r\n\r\nclass Database:\r\n\r\n    def __init__(self, host, username, password, database):\r\n        try:\r\n            self.connection = mysql.connector.connect(\r\n                host=host,\r\n                user=username,\r\n                password=password,\r\n                database=database,\r\n            )\r\n\r\n            self.cursor = self.connection.cursor()\r\n        except:\r\n            print('something went wrong')\r\n\r\n    def execute(self, query):\r\n        try:\r\n            self.cursor.execute(qurey)\r\n            result = self.cursor.fetchall()\r\n            return result\r\n        except:\r\n            print('something went wrong')\r\n\r\nmy_db = Database(\r\n    host='localhost',\r\n    username='alireza',\r\n    password='testpass123',\r\n    database='shop',\r\n)\r\n\r\nresult = my_db.execute('select * from users')\r\n```\r\n\r\nThis piece of code works well. What is the purpose of using OOP in this scenario? Are you keeping the metadata as a parameter? Like implementing the caching structure using OOP? I'm not sure if you are. You have just created a shortcut for using the `mysql.connector` module via classes which is a bit complicated and not recommended at all. So what? You better head to the next section.\r\n\r\n### Nested Functions\r\nClosure functions are one of the most brilliant use cases of inner functions or nested functions. They do act like a small piece of class, but they are way understandable, small, and useful. In order to understand the closures, you better take a short look at what a nested function is.\r\n\r\nA function that is described in another function is called an Inner Function and the whole function called Nested Function. As amazing nested functions use cases, we can point out the Decorators, Closure Functions, and Encapsulation. In the following script, you can find the simplest nested function ever.\r\n\r\n```python\r\ndef printer():\r\n    def say_hello():\r\n        print('Hello, world')\r\n    return say_hello\r\n\r\nvar = printer()\r\nvar() # >>> Hello, world\r\n```\r\n\r\nWhy don't we run the `say_hello()` function directly? I don't have access. I must create a `printer` object in order to be able to call the `say_hello()` function. This part might be a little bit tricky until you believe that everything is an object in Python; which means that you can do whatever you want with functions, classes, variables, and so on. Pass them as an argument, store them in a list, or etc.\r\n\r\n### Closures\r\n\r\nLet's back to our database example. Now, I'm trying to implement this scenario using a closure function.\r\n\r\n```python\r\nimport mysql.connector\r\n\r\ndef Database(host, username, password, database):\r\n\r\n    try:\r\n        connection = mysql.connector.connect(\r\n            host=host,\r\n            user=username,\r\n            password=password,\r\n            database=database,\r\n        )\r\n\r\n        cursor = connection.cursor()\r\n    except:\r\n        print('something went wrong')\r\n\r\n    def execute(qurey):\r\n        cursor.execute(qurey)\r\n        result = cursor.fetchall()\r\n        return result\r\n\r\n    return execute\r\n\r\nmy_db = Database(\r\n    host='localhost',\r\n    username='alireza',\r\n    password='testpass123',\r\n    database='shop',\r\n)\r\n\r\nresult = my_db('select * from users')\r\n```\r\n\r\nBrilliant yea? Now, what just happened there? Well, the inner function has access to the outer function arguments and declared variables, but you need to make sure that there is something that might take you a lot of time in some cases and that's \"Immutability\".\r\n\r\n### Change Immutables in Closure Functions\r\nWe are going to create a closure function that inputs numbers and returns the overall average every time we pass a new number.\r\n\r\n```python\r\ndef calc():\r\n    total = 0\r\n    count = 0\r\n\r\n    def appender(number):\r\n        count += 1\r\n        total += number\r\n        return total / count\r\n    return appender\r\n\r\n\r\npoints = calc()\r\n\r\nfor i in [points(5), points(10), points(12)]:\r\n    print(i)\r\n```\r\n\r\nDoes everything look fine? Hack no. In Python, integers, tuples, strings, floats, decimals, ranges, and booleans are immutable which means that you can't change their values after the creation. You should use the `nonlocal` keyword in order to make the variables free for the inner function so that the inner function would be able to make the changes and do other stuff. In this case, the variable is no longer local and would be accessible from the inner function. This topic backs to the variable declaration.\r\n\r\n```python\r\ndef calc():\r\n    total = 0\r\n    count = 0\r\n\r\n    def appender(number):\r\n        # new\r\n        nonlocal total\r\n        nonlocal count\r\n\r\n        count += 1\r\n        total += number\r\n        return total / count\r\n    return appender\r\n\r\n\r\npoints = calc()\r\n\r\nfor i in [points(5), points(10), points(12)]:\r\n    print(i)\r\n```\r\n\r\n### Conclusion\r\nAlways learn the best practices. Do rely on them. They always help you to get out of trouble in the best easiest way.", "author": 1, "slug": "python-closure-functions", "lang": "lang", "is_draft": false, "published": "2021-05-24T06:33:22.782Z", "last_update": "2021-05-24T07:19:17.228Z"}}, {"model": "core.post", "pk": 6, "fields": {"title": "A Few Tips to Become Smarter at Django", "abstract": "Django is a popular back-end framework. A lot of developers and high-ranked companies are using it, but what is the magic word? Can you guaranty your next step in your learning journey? I've described a lot of tips in this one.", "body": "### Model Before Starting\r\nHow do you build a structure without even at least imagining it in your mind? That's why great people always have a piece of paper in their pocket. There is a quote from __J.K. Rowling__ that says:\r\n\r\n>Understanding is the first step to acceptance, and only with acceptance can there be recovery.\r\n\r\nSo what that mean in the tech world? Modeling your tables allows you to figure out the next steps throughout your project development. Imagine you have tons of views and forms. In the template development, you understand that there is something missing from the Student table. That could be super cool if I store the student's emails on the table.\r\n\r\nAfter this implementation, you are now in really big trouble. You should cut down the template development in order to start mailing configurations, what's more, you need to set up a verification system to verify those email addresses. You're stuck. I know. What's the solution at this moment? Backing into `$ python manage.py startapp myapp` for sure.\r\n\r\nThe best practice is to prevent making these mistakes in your projects and that's why I suggest you design your tables before you run into the commands and codes.\r\n\r\n### Hard-Coded URLs; Run Away\r\nYou've already passed the Poll project from the official Django website and trying to create your first weblog. Designing your navbar for a better UI by the way. Everything looks amazing until you decide to change the `/about` endpoint to `/aboutme`. You run into a problem that is not quite weird, to be honest. You've been using the hard-coded URLs.\r\n\r\n```python\r\nfrom django.urls import path\r\n\r\nfrom . import views\r\n\r\nurlpatterns = [\r\n    # ...\r\n    path('/aboutme', views.about, name='about'),\r\n    # ...\r\n]\r\n```\r\n\r\n```html\r\n<nav>\r\n    <ul>\r\n        <li><a href=\"/about\">About Me</a></li>\r\n    </ul>\r\n<nav>\r\n```\r\n\r\nYou might have figured out the issue. The problem is occurring because of that href URL. You quickly change it to `/aboutme`. Did you fix it entirely? What if you had to change all your endpoints? Would change the href URLs each by each?\r\n\r\n```html\r\n<nav>\r\n    <ul>\r\n        <li><a href=\"{%url 'about' [params]%}\">About Me</a></li>\r\n    </ul>\r\n<nav>\r\n```\r\n\r\nFrom now on. whenever you change the app URL, the href address will be changed based on your endpoint in `yourapp/urls.py`.\r\n\r\n### QuerySet Optimizations\r\nSelect those fields you need to use in the templates. Imagine you want to show all book cover images on a template. You kept up with the following script.\r\n\r\n```python\r\ndef show_covers(request):\r\n    books = Book.objects.all()\r\n    return render(request. 'app/covers.html', {'books': books})\r\n```\r\n\r\nYour template will have a really long trashy path to do it for you when you have millions of books in your database. You just need `book.cover` fields, so that you better prevent sending the whole objects to the template engine. Use `values()` to optimize your requests.\r\n\r\n```python\r\ndef show_covers(request):\r\n    covers = Book.objects.values('cover')\r\n    return render(request. 'app/covers.html', {'covers': covers})\r\n```\r\n\r\nNice queryset optimization yea? True. It takes less time to get the result than using the `all()` method though. More tips explained with more details [here](../The-Power-of-Django-ORM/).\r\n\r\n### Use `message` Module\r\nIn some cases, you may need to report some actions done by the end-user. The `message` module is a Django built-in module that allows you to report them all whether they were successful or not to the end-user after each reloads. This module is explained in action in the [EmailSubscriber](https://github.com/lnxpy/emailsubscriber) project which is a really useful tool.\r\n\r\nFor more information about this module, check out the [official documentation](https://docs.djangoproject.com/en/3.2/ref/contrib/messages/).\r\n\r\n### Use `shell` and Tests\r\nDjango has a lot of facilities and brilliant tools that brought to enable you to design your project with less complexity, pain, and nervousness. Django shell is one of them. This tool allows you to create small snippets to find out whether they are working. As a Django developer, I use this tool whenever I stuck in my project tasks. Be careful about what you do in your shell. They are fully effective on your database tables. That's why I recommend you to use tests to clarify your querysets, authentications, and all SQL operations. Django Test creates a new in-memory database that has the same structure as your real databases. After each execution, the cached databases will be destroyed.\r\n\r\n#### Shared Cache\r\nBasically, your SQLite database has a feature named Shared Cache which stands for the ability to create a cached database in memory that is completely separated from the main database. The connections will be separated too. Django Test creates the connections between its core and the Shared Cache connections. Those connections (based on the configurations) will be lost and the Shared tables will be lost.\r\n\r\n### Have a Localized Settings\r\nIn some cases, you need to set up the project locally and test it out. You won't be able to run the server locally with the settings that are configured for the server-side like the security configurations for sure.\r\n\r\n```python\r\n# Security Zone\r\nCSRF_COOKIE_SECURE = True\r\nSESSION_COOKIE_SECURE = True\r\n\r\nSECURE_BROWSER_XSS_FILTER = True\r\nSECURE_CONTENT_TYPE_NOSNIFF = True\r\n\r\nSECURE_SSL_REDIRECT = True\r\n\r\nSECURE_HSTS_SECONDS = 86400  # 1 day\r\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\r\nSECURE_HSTS_PRELOAD = True\r\n```\r\n\r\nWhat you need is to create a file named `local_settings.py` right next to `settings.py` and override the settings that are critical in the local environment like disabling the `# Security Zone`. Finally, you should override all those variables in your main settings file.\r\n\r\n```python\r\n# ...\r\ntry:\r\n    from .local_settings import *\r\nexcept:\r\n    pass\r\n```\r\n\r\nThe `local_settings.py` file is being ignored by some version control systems such as git. Notice that there must not be any file named `local_settings` on your server directories in the same path.\r\n \r\n### Don't Think About the Front-end\r\nYou are responsible for creating a strong and optimized back-end service. Creating those templates is not why you are hopping into your favorite editor. Finally, make sure that there should be a way that your view function works better because there is nothing perfect. After millions of commits. your code is still optimizable.\r\n\r\n### Keep Learning\r\nAnd last but not least, keep learning new things. They allow you to solve your problems by spectating your project from other POVs.", "author": 1, "slug": "a-few-tips-to-become-smarter-at-django", "lang": "lang", "is_draft": false, "published": "2021-05-29T20:17:15.086Z", "last_update": "2021-06-11T14:37:27.247Z"}}, {"model": "core.project", "pk": 1, "fields": {"title": "DBMQ", "description": "Docker-based Message Queuing (DBMQ) is an efficient way to run the pre-built configurations on the build process of Dockerfiles.", "logo": "", "is_opensource": true, "github": "https://github.com/dbmqproject/dbmq", "medium": "https://medium.com/@lnxpy/sample-project-in-dbmq-v2-1-d4f8cb41108c", "submitted": "2021-07-11T15:16:32.235Z"}}, {"model": "core.project", "pk": 2, "fields": {"title": "BlueLight", "description": "Its concepts explain the base infrastructure explanation in the IoT with Socket and Django webserver which lets you control your house lighting system using a simple private network with a Django service and a device to control the operations.", "logo": "", "is_opensource": true, "github": "https://github.com/lnxpy/bluelight", "medium": "", "submitted": "2021-07-11T15:18:22.923Z"}}, {"model": "accounts.customuser", "pk": 1, "fields": {"password": "pbkdf2_sha256$216000$qmnmBvuAQQ9b$yaaK3I7WCY2nuO6rEt82zpIjcE31dVgYnpyp5nYkEYk=", "last_login": "2022-01-01T08:17:56.789Z", "is_superuser": true, "username": "alireza", "first_name": "", "last_name": "", "email": "lnxpylnxpy@gmail.com", "is_staff": true, "is_active": true, "date_joined": "2021-05-05T15:31:09.877Z", "groups": [], "user_permissions": []}}, {"model": "admin_honeypot.loginattempt", "pk": 1, "fields": {"username": "mmt", "ip_address": "10.0.0.93", "session_key": null, "user_agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36", "timestamp": "2021-05-05T16:23:01.586Z", "path": "/admin/login/?next=/admin/"}}, {"model": "admin_honeypot.loginattempt", "pk": 2, "fields": {"username": "alireza", "ip_address": "10.0.0.93", "session_key": null, "user_agent": "Mozilla/5.0 (Linux; Android 8.0.0; LDN-L21) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Mobile Safari/537.36", "timestamp": "2021-05-16T05:34:33.910Z", "path": "/admin/login/?next=/admin/"}}, {"model": "authtoken.token", "pk": "2c1a376671e9ef4d395c72fc38d235f92c8f7732", "fields": {"user": 1, "created": "2021-07-27T04:27:59.617Z"}}]